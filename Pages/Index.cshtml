@page
@model MeterManager.Pages.IndexModel
@{
    ViewData["Title"] = "Water Usage Report";
}

<h2>Water Usage Report</h2>

<!-- Filter Form -->
<form method="get" class="mb-3">
    <label>Start Date:
        <input type="date" name="startDate" value="@(Request.Query["startDate"])" />
    </label>
    <label>End Date:
        <input type="date" name="endDate" value="@(Request.Query["endDate"])" />
    </label>
    <button type="submit" class="btn btn-primary btn-sm">Filter</button>
    <a href="/" class="btn btn-secondary btn-sm">Reset</a>
</form>

<!-- Download CSV Button -->
<button id="downloadCsv" class="btn btn-info btn-sm mb-3">
    Download CSV
</button>

@if (Model.Meters != null && Model.Meters.Any() && Model.HourTimestamps.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Timestamp</th>
                @foreach (var meter in Model.Meters)
                {
                    if (meter.MeterID == 5)
                    {
                        <th>
                            Claybrook LowFlow<br />(ID: 5)<br />
                            <span id="flow-5" style="font-weight:bold;color:#007bff;">Loading...</span>
                        </th>
                        <th>
                            Claybrook HighFlow<br />(ID: 5)<br />
                            <span id="flow-high-5" style="font-weight:bold;color:#28a745;">Loading...</span>
                        </th>
                    }
                    else
                    {
                        <th>
                            @meter.Location<br />(ID: @meter.MeterID)<br />
                            <span id="flow-@meter.MeterID" style="font-weight:bold;color:#007bff;">Loading...</span>
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.HourTimestamps.Count; i++)
            {
                var timestamp = Model.HourTimestamps
                                      .OrderByDescending(t => t)
                                      .ElementAt(i);
                <tr>
                    <td>@timestamp.ToString("M/d/yyyy h:mm tt")</td>
                    @foreach (var meter in Model.Meters)
                    {
                        var meterIdStr = meter.MeterID.ToString();
                        if (meter.MeterID == 5)
                        {
                            <!-- LOWFLOW -->
                            @if (Model.HourlyReadings.TryGetValue(timestamp, out var lowMap) &&
                                 lowMap.TryGetValue(meterIdStr, out var lowReading))
                            {
                                decimal diff = 0;
                                if (i + 1 < Model.HourTimestamps.Count)
                                {
                                    var prev = Model.HourTimestamps
                                                    .OrderByDescending(t => t)
                                                    .ElementAt(i + 1);
                                    if (Model.HourlyReadings.TryGetValue(prev, out var prevLowMap) &&
                                        prevLowMap.TryGetValue(meterIdStr, out var prevLowReading))
                                    {
                                        diff = lowReading.MeterReading - prevLowReading.MeterReading;
                                    }
                                }
                                <td>
                                    @lowReading.MeterReading<br />
                                    @diff gallons
                                </td>
                            }
                            else
                            {
                                <td>0<br />0 gallons</td>
                            }

                            <!-- HIGHFLOW -->
                            @if (Model.HourlyReadings.TryGetValue(timestamp, out var highMap) &&
                                 highMap.TryGetValue(meterIdStr, out var highReading))
                            {
                                decimal highDiff = 0;
                                if (i + 1 < Model.HourTimestamps.Count)
                                {
                                    var prev = Model.HourTimestamps
                                                    .OrderByDescending(t => t)
                                                    .ElementAt(i + 1);
                                    if (Model.HourlyReadings.TryGetValue(prev, out var prevHighMap) &&
                                        prevHighMap.TryGetValue(meterIdStr, out var prevHighReading))
                                    {
                                        highDiff = (highReading.HighFlowReading ?? 0)
                                                 - (prevHighReading.HighFlowReading  ?? 0);
                                    }
                                }
                                <td>
                                    @(highReading.HighFlowReading ?? 0)<br />
                                    @highDiff gallons
                                </td>
                            }
                            else
                            {
                                <td>0<br />0 gallons</td>
                            }
                        }
                        else
                        {
                            @if (Model.HourlyReadings.TryGetValue(timestamp, out var map) &&
                                 map.TryGetValue(meterIdStr, out var reading))
                            {
                                decimal diff = 0;
                                if (i + 1 < Model.HourTimestamps.Count)
                                {
                                    var prev = Model.HourTimestamps
                                                    .OrderByDescending(t => t)
                                                    .ElementAt(i + 1);
                                    if (Model.HourlyReadings.TryGetValue(prev, out var prevMap) &&
                                        prevMap.TryGetValue(meterIdStr, out var prevReading))
                                    {
                                        diff = reading.MeterReading - prevReading.MeterReading;
                                    }
                                }
                                <td>
                                    @reading.MeterReading<br />
                                    @diff gallons
                                </td>
                            }
                            else
                            {
                                <td>0<br />0 gallons</td>
                            }
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No readings found.</p>
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 1) Live flow updater
    function updateFlows() {
        fetch('/Api/ActiveFlow')
            .then(r => r.json())
            .then(data => {
                data.forEach(m => {
                    const el = document.getElementById('flow-' + m.meterID);
                    if (el) el.textContent = m.flowRate != null ? m.flowRate + ' gpm' : 'N/A';
                    if (m.meterID == 5) {
                        const hi = document.getElementById('flow-high-5');
                        if (hi) hi.textContent = m.highFlowRate != null
                            ? m.highFlowRate + ' gpm (High)'
                            : 'N/A';
                    }
                });
            })
            .catch(console.error);
    }
    updateFlows();
    setInterval(updateFlows, 1000);

    // 2) CSV downloader
    const btn = document.getElementById('downloadCsv');
    if (btn) {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const url = '@Url.Page(null, "ExportCsv", new {
                startDate = Request.Query["startDate"],
                endDate   = Request.Query["endDate"]
            })';
            fetch(url)
              .then(resp => {
                if (!resp.ok) throw new Error('Export failed');
                return resp.blob();
              })
              .then(blob => {
                const blobUrl = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = blobUrl;
                const ts = new Date().toISOString().slice(0,19).replace(/[-T:]/g,'');
                a.download = `WaterUsage_${ts}.csv`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                URL.revokeObjectURL(blobUrl);
              })
              .catch(err => {
                console.error('CSV download error:', err);
                alert('Could not download CSV. See console.');
              });
        });
    }
});
</script>
}
